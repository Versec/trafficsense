#include <pebble.h>
#define NUM_STOPS	3
#define KEY_FIRST_STOP	0

static Window * window;
static TextLayer *stop1;
static TextLayer *stop2;
static TextLayer *lastStop;
static TextLayer * stopArray [NUM_STOPS];

void message_received(DictionaryIterator *iterator) {
	for (int i = 0; i < NUM_STOPS; i++) {
		Tuple *stopTuple = dict_find(iterator, KEY_FIRST_STOP + i);
		if (stopTuple) {
			text_layer_set_text(stopArray[i], stopTuple->value->cstring);
		}
	}
		
}

static void send_cmd(uint8_t cmd) {
	Tuplet value = TupletInteger(0, cmd);
	DictionaryIterator *iter;
	app_message_outbox_begin(&iter); // returns AppMessageResult
	if (iter == NULL) // if app_message_outbox_begin fails, iter == NULL
		return;
	dict_write_tuplet(iter, &value);
	dict_write_end(iter);
	app_message_outbox_send(); //returns AppMessageResult
}

void hellowindow_single_click_handler(ClickRecognizerRef recognizer, void* context) {
	send_cmd(0);

}
void hellowindow_click_config_provider(Window *window) {
	window_single_click_subscribe(BUTTON_ID_UP, hellowindow_single_click_handler);
}

void init(void) {
	window = window_create();
	window_stack_push(window, true /* Animated */);
	Layer *window_layer = window_get_root_layer(window);
	GRect bounds = layer_get_frame(window_layer);
	int spacing = 30;
	for (int i = 0; i < NUM_STOPS; i++) {
		stopArray[i] = text_layer_create((GRect){ .origin = { 0, i * spacing }, .size = bounds.size });
		text_layer_set_text_alignment(stopArray[i], GTextAlignmentCenter);
		layer_add_child(window_layer, text_layer_get_layer(stopArray[i]));
	}

	text_layer_set_text(stopArray[0], "First stop");
	text_layer_set_text(stopArray[1], "Second stop");
	text_layer_set_text(stopArray[2], "Last stop");

	
	window_set_click_config_provider(window, (ClickConfigProvider)hellowindow_click_config_provider);
	
	
	app_message_open(64, 16);
	//set the function that will be called when a message is received from the phone
	app_message_register_inbox_received((AppMessageInboxReceived)message_received);
	//and when it's dropped
	//app_message_register_inbox_dropped(message_dropped)
		
	//and for messages to phone (outbox)
	//app_message_register_outbox_sent(message_sent);
	//app_message_register_outbox_failed(message_failed);
	
}

void deinit(void) {
	for (int i = 0; i < NUM_STOPS; i++) {
		text_layer_destroy(stopArray[i]);
	}
	window_destroy(window);
}

int main(void) {
	init();
	app_event_loop();
	deinit();
}
